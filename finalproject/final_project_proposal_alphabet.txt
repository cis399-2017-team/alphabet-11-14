alphabet[11:14] final project proposal

Goals:
    Throughout assignment 4 the most challenging aspect we had encountered was team communication, not within ourselves but bewteen groups. For this reason team alphabet has decided to create a java-based, command line chat system to connect members from any amazon aws instance, or any terminal with the jvm. 
    The main goals of this project will be to establish a server capable of transmitting public messages from any given client to every other client. Beyond that, we would like to implement separate chat rooms for every team's subnet. Finally, we would like to encrypt the messages in some way.
    This would obviously be tested by installing and communicating between many different computers on many different networks.

Issues and Effects:
    The main effect that this project is supposed to have is connectivity. The program was firstly designed with a centralized server in mind. By not allowing users to have access to the server code, we limit the possible connectivity of any given user to other users who are also able to connect to my master server. This program could not be used over a local network, for example. Public internet access is a requirement. I could also see a user wanting an option to log or same messages. I purposefully left this feature out, as I like my privacy. If any user really wishes to save the messages, they can run script.

Security Issues:
    Being a messaging service, we would like to encrypt and decrypt all traffic on the client side. Another security issue is the possible vulnerability of having another port publicly accessable on the server machine. Note: The security group had to be modified, I hope that is fine.

Work needed:
    First and foremost, the java implementation must be done. This is mostly complete, we just need to add features. This program juns in the jvm, so installation of the of the default-jre package is required to run. Eventually a puppet module should be created to automate the installation of testing and especially development environment on team-run instances. \     A note about java installation:
        $ sudo apt-get install default-jre or default-jdk 
            can fail without
        $ sudo apt-get update && sudo apt-get upgrade

Documentation:
    To use, one should obtain a copy of the compiled AlphabetChatClient.class from a team member. From that point, type:
        $ java AlphabetChatClient
    This will connect you, type messages and press enter to send.
