alphabet[11:14] final project proposal

Goals:

    Throughout assignment 4 the most challenging aspect we had encountered was team communication, not within ourselves but bewteen groups. For this reason team Alphabet has decided to install and manage an IRC (Internet Relay Chat) Server on one of our instances. Using this application a team member can install an IRC client on their home machine, AWS instance, or any other system and send messages to any other client connected to our server at that time. The common use case would be if a team (or teams) decided to communicate during a certain time period. They could all install this chat client on their machine and broadcast and receive messages from all other members on the network. They could also decide to broadcast messaages to their immediate subnet (aka their team's AWS instance group). 

    To summarize, the main goals of this project will be to implement a client-server system capable of transmitting public messages from any given client to every other client. Clients using this system will also hopefully be able to send message to private chat rooms. This is application feature dependant. Additionally, we will look into the encrption and security of the IRC server/client we choose to utilize.

    We can test this system in a couple of ways. The first will be to ensure that various client spread across different subnets can send and receive messages. Also, we will test the sending and receiving of messages to the client's direct subnet. We will need to test to ensure buffer overflow errors do not occur, connectivity issues with dropped clients are handled, and the server can handle a normal number of connected clients.

Issues and Effects:

    The main effect that this project is supposed to have is connectivity. The program was firstly designed with a centralized server in mind. For this reason, any client wishing to use our AWS server must have public internet connectivity. Even when sending messages to another client on the same private subnet, all traffic must be routed out then back in.
    One issue we can forsee is the lack of a standard IRC client software. Because many can be used to connect to the same server, users could encounter confusion, then looking to the administrators for configuration instructions for a client they have never used before.

Security Issues:

    Because we are using a third party IRC server, the security issues are that of that application, compounded with any vulnerabilities found in each respective client's software. We would like to be able to encrypt the messages. Another security issue is the possible vulnerability of having another port publicly accessable on the server machine. Note: I created a new security group.
    Also, we should investigate the anonymity of clients connected to the server. 
"""
FOR MATT
"""

Work needed:
    First an IRC server must be installed on the delegated server machine. This could be automated with a puppet module with added support to keep the server running. Then every client which wishes to connect must install and configure an IRC client of their choice. As I mentioned earlier, the server must ensure that its port is available for incoming connections. For our AWS instance this means opening port 6667 for IRC on alphabet[11].

"""
FOR LOGAN
"""

Documentation:

"""
FOR LOGAN

""""
FOR MATT
"""""
